function findNodeByName(rootNode, name) {
   // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª ‚Äî –∏—Å–∫–æ–º—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
   if (rootNode.name === name) {
      return rootNode;
   }

   // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
   if (rootNode.getChildren) {
      for (const child of rootNode.getChildren()) {
         const found = findNodeByName(child, name);
         if (found) {
            return found;
         }
      }
   }
   return null; // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}

window.addEventListener('DOMContentLoaded', function () {
   const canvas = document.getElementById("container3D");
   if (!canvas) {
      console.log("Canvas not found!");
      return;
   };
   let model;
   let empty;
   let volumeElement;
   let frequency;
   let antenna;
   let cylinder;
   let viewportX;
   let viewportY;
   let progressRotationValue = 0;
   let degRotationValue = -100;
   let degRotationFrequency = 180;
   let progressRotationFrequency = 0;

   function addSizeViewport() {
      viewportX = Math.min(window.innerWidth, 1440);
      viewportY = window.innerHeight;
   }
   addSizeViewport();
   let ratioX = viewportX / 1000;
   let ratioY = viewportY / 1000;
   // –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ babylon
   BABYLON.SceneLoader.ShowLoadingScreen = false;
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
   const engine = new BABYLON.Engine(canvas, true);
   console.log("WebGL version:", engine.webGLVersion); // 1 –∏–ª–∏ 2
   console.log("WebGL API:", engine.version); // "webgl1" –∏–ª–∏ "webgl2"
   if (engine.webGLVersion < 2) {
      console.warn("WebGL 2.0 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å");
   }
   // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
   const scene = new BABYLON.Scene(engine);
   scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);
   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
   let distance = 40;
   if (MIN768.matches) { distance = 20 };
   const camera = new BABYLON.ArcRotateCamera("camera", Math.PI / 2, Math.PI / 2, distance, BABYLON.Vector3.Zero(), scene);
   // camera.attachControl(canvas, true);

   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞
   const light1 = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(-1, 1, 5), scene);
   light1.intensity = 1;
   light1.diffuse = new BABYLON.Color3(1, 1, 1);
   const light2 = new BABYLON.HemisphericLight("light2", new BABYLON.Vector3(0, 0, -5), scene);
   light2.intensity = 0.3;
   light2.diffuse = new BABYLON.Color3(1, 1, 1);


   // const spotLight = new BABYLON.SpotLight(
   //    "spotLight",
   //    new BABYLON.Vector3(10, 5, -3),
   //    new BABYLON.Vector3(-10, -4, 2),
   //    Math.PI / 3,
   //    0,
   //    scene);
   // spotLight.intensity = 1500;
   // spotLight.diffuse = new BABYLON.Color3(1, 0.144, 0);
   // console.log(spotLight);


   // const spotLight_1 = new BABYLON.SpotLight(
   //    "spotLight1",
   //    new BABYLON.Vector3(1, 3.3, 2),
   //    new BABYLON.Vector3(0, 0, -2),
   //    Math.PI * 2,
   //    10,
   //    scene);
   // spotLight_1.intensity = 25;
   // spotLight_1.radius = 500;
   // spotLight_1.diffuse = new BABYLON.Color3(1, 0.1, 0);

   // Color3(1, 0.466, 0.302)
   // FF764EFF
   // rgb(255, 144, 0)

   // const shadowGenerator = new BABYLON.ShadowGenerator(
   //    1024, // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã —Ç–µ–Ω–µ–π (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ)
   //    spotLight // –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞
   // );

   // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
   BABYLON.SceneLoader.Append("https://gorejkoff.github.io/Ural_factories/dist/glb/", "transmitter-8.glb", scene, function (scene) {
      // BABYLON.SceneLoader.Append("../glb/", "radio-texture-1.glb", scene, function (scene) {
      // BABYLON.SceneLoader.Append("../glb/", "transmitter-8.glb", scene, function (scene) {
      scene.animationGroups.forEach(animationGroup => {
         animationGroup.stop();
         animationGroup.dispose();
      });

      model = scene.getMeshByName("__root__");
      if (!model) {
         console.error("–ù–µ –Ω–∞–π–¥–µ–Ω __root__!");
         return;
      }
      console.log(model, "model");

      if (MIN768.matches) {
         model.position = new BABYLON.Vector3(0, -3, 0);
      }
      cylinder = model._children[0];
      // console.log(cylinder, 'cylinder')

      empty = model._children[1];
      // console.log(empty, "empty");

      // antenna = empty._children.filter((e) => { return e.name == "antenna" });
      // console.log(antenna[0], 'antenna');

      volumeElement = empty._children.filter((e) => { return e.name == "volume" });
      // console.log(volumeElement[0], 'volumeElement');

      frequency = empty._children.filter((e) => { return e.name == "Frequency" });
      // console.log(frequency[0], 'frequency');


      // spotLight.parent = empty;
      // spotLight_1.parent = empty;


      // let front_frame = empty._children.filter((e) => { return e.name == "front frame" });
      // console.log(front_frame[0], 'front_frame');

      let back_cover = scene.getMeshByName("back cover");
      // console.log(back_cover[0], 'back_cover');

      let holder = scene.getMeshByName("holder");
      // console.log(holder[0], 'holder');

      // let glass = empty._children.filter((e) => { return e.name == "glass" });
      // console.log(glass[0], 'glass');

      // let black_glass = empty._children.filter((e) => { return e.name == "black glass" });
      // console.log(black_glass[0], 'black glass');

      // let black_glass_primitive0 = black_glass[0]._children.filter((e) => { return e.name == "black glass_primitive0" });
      // console.log(black_glass_primitive0[0], 'black glass_primitive0');

      // let black_glass_primitive1 = black_glass[0]._children.filter((e) => { return e.name == "black glass_primitive1" });
      // console.log(black_glass_primitive1[0], 'black glass_primitive1');

      // spotLight.excludedMeshes.push(black_glass_primitive0[0]);
      // spotLight.excludedMeshes.push(black_glass_primitive1[0]);
      // spotLight.excludedMeshes.push(glass[0]);

      // let frame = empty._children.filter((e) => { return e.name == "frame" });
      // console.log(frame[0], 'frame');
      // let frame_primitive0 = frame[0]._children.filter((e) => { return e.name == "frame_primitive0" });
      // console.log(frame_primitive0[0], 'frame_primitive0');


      const mesh_primitive0 = scene.getMeshByName("frame_primitive0");
      console.log(mesh_primitive0, " - mash frame_primitive0");




      function addTexture() {
         // *******************************************************************************************************
         // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
         const new_material = new BABYLON.StandardMaterial("custom_mat", scene);

         // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
         const new_texture = new BABYLON.Texture("../textures/mud.png", scene); // üö® –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å!
         // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
         new_texture.onLoadObservable.add(() => {
            console.log("–¢–µ–∫—Å—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
         });
         // new_texture.onErrorObservable.add(() => {
         //    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã!");
         // });

         // new_material.diffuseTexture = new_texture;

         // ********************************************************************************************************
         // PBR texture
         // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
         const pbr = new BABYLON.PBRMaterial("pbr", scene);
         pbr.albedoTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_albedo.png", scene); // Albedo
         pbr.normalTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_normal-ogl.png", scene);    // Normal Map
         pbr.metallicTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_metallic.png", scene); // Metallic
         pbr.roughnessTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_roughness.png", scene); // Roughness
         pbr.emissiveTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_emissive.png", scene)
         pbr.ambientTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_ao.png", scene); // –∏–º–∏—Ç–∏—Ä—É–µ—Ç –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏ –≤ —É–≥–ª–∞—Ö –∏ —Å–∫–ª–∞–¥–∫–∞—Ö 3D-–º–æ–¥–µ–ª–∏, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞
         // pbr.ambientTextureStrength = 2.0; // –£—Å–∏–ª–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
         pbr.heightTexture = new BABYLON.Texture("../textures/columned-lava-rock-bl/columned-lava-rock_height.png", scene);
         pbr.useParallax = true; // –í–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–∞–∫—Å
         pbr.useParallaxOcclusion = true; // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
         pbr.parallaxScaleBias = 0.1; // –°–∏–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ (0.01‚Äì0.1)

         pbr.albedoTexture.uScale = 1; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±
         pbr.albedoTexture.vScale = 1; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–±

         pbr.metallic = 1.0;       // –ü–æ–ª–Ω–∞—è –º–µ—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç—å
         pbr.roughness = 0.3;      // –ì–ª–∞–¥–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
         // pbr.subSurface.isRefractionEnabled = true; // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (–¥–ª—è —Å—Ç–µ–∫–ª–∞/–≤–æ–¥—ã)
         // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫ –º–µ—à—É

         // mesh_primitive0.material = pbr;
         back_cover.material = pbr;
         holder.material = pbr;
         // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

         // new_material.specularColor = new BABYLON.Color3(0.2, 0.2, 0.2); // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–ª–∏–∫–∏
         // new_material.emissiveColor = new BABYLON.Color3(0.1, 0.1, 0.1); // –õ—ë–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
         // new_material.ambientColor = new BABYLON.Color3(0.1, 0.1, 0.1); // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ. –°–µ—Ä—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ (0-1)

         // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫ –º–µ—à—É
         // mesh_primitive0.material = new_material;
         // ********************************************************************************************************
      }


      function testTexture() {
         if (mesh_primitive0 && mesh_primitive0.material) {
            const material = mesh_primitive0.material;
            console.log(material, " - material");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ñ—Ñ—É–∑–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã(albedo)
            if (material.diffuseTexture) {
               console.log("Diffuse Texture:", material.diffuseTexture.name);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—Ä–º–∞–ª-–º–∞–ø–∞
            if (material.bumpTexture) {
               console.log("Bump Texture:", material.bumpTexture.name);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç—É—Ä (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
            if (material instanceof BABYLON.PBRMaterial) {
               if (material.albedoTexture) {
                  console.log("Albedo Texture:", material.albedoTexture.name);
               }
               // if (material.normalTexture) {
               //    console.log("Normal Texture:", material.normalTexture.name);
               // }
               if (material.metallicRoughnessTexture) {
                  console.log("MetallicRoughness Texture:", material.metallicRoughnessTexture.name);
               }
            }
         }
      }


      // spotLight.includedOnlyMeshes = [antenna[0], front_frame[0]];

      // let point = empty._children.filter((e) => { return e.name == "Point" });
      // console.log(point[0], "point");





      // // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      // shadowGenerator.useBlurExponentialShadowMap = true;
      // shadowGenerator.blurKernel = 320; // –†–∞–∑–º—ã—Ç–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      // // –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–Ω—å
      // shadowGenerator.addShadowCaster(back_cover[0])
      // shadowGenerator.addShadowCaster(frame_primitive0[0])
      // // shadowGenerator.addShadowCaster(holder[0])
      // // –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–Ω—å
      // holder[0].receiveShadows = true;
      // // frame_primitive0[0].receiveShadows = true;
      // // back_cover[0].receiveShadows = true;



   });

   //!!! Inspector 
   // scene.debugLayer.show();


   let circleStart = 0.5;
   let circlePath = 1 - circleStart;
   function rodioAnimation() {

      if (MIN768.matches) {
         empty.position = new BABYLON.Vector3(
            8 * ratioX * (1 - progressRadioAnimation),
            -1 * ratioY * (1 - progressRadioAnimation) - 1,
            0);
         // spotLight.position.x = ratioY * (1 - progressRadioAnimation);
         // console.log(spotLight.position.x);

      } else {
         model.position = new BABYLON.Vector3(progressRadioAnimation * -3, progressRadioAnimation * -2 + 2, 0)
      }
      empty.rotation = new BABYLON.Vector3(0, (Math.PI * 2) * -progressRadioAnimation, 0);
      if (progressRadioAnimation > circleStart) {
         let value = (progressRadioAnimation - circleStart) / circlePath;
         cylinder.scaling.x = value;
         cylinder.scaling.y = value;
         cylinder.scaling.z = value;
      } else {
         cylinder.scaling.x = 0;
         cylinder.scaling.y = 0
         cylinder.scaling.z = 0
      }
      if (progressRadioAnimation >= 0.99) {
         degRotationValue <= progressRotationValue && rotationVolume();
         degRotationFrequency >= progressRotationFrequency && rotationFrequency();
      }
      if (progressRadioAnimation < 0.99) {
         progressRotationValue <= 0 && reverseRotationVolume();
         progressRotationFrequency >= 0 && reverseRotationFrequency();
      }

   }

   // –†–µ–Ω–¥–µ—Ä —Å—Ü–µ–Ω—ã
   engine.runRenderLoop(function () {
      if (empty) { rodioAnimation() }
      scene.render();
   });

   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
   window.addEventListener("resize", function () {
      engine.resize();
   });


   function rotationVolume() {
      progressRotationValue -= 2;
      volumeElement[0].rotation = new BABYLON.Vector3(Math.PI / 2, 0, (Math.PI / 180) * progressRotationValue);
   }
   function reverseRotationVolume() {
      progressRotationValue += 2;
      volumeElement[0].rotation = new BABYLON.Vector3(Math.PI / 2, 0, (Math.PI / 180) * progressRotationValue);
   }
   function rotationFrequency() {
      progressRotationFrequency += 2.5;
      frequency[0].rotation = new BABYLON.Vector3(Math.PI / 2, 0, (Math.PI / 180) * -progressRotationValue);
   }
   function reverseRotationFrequency() {
      progressRotationFrequency -= 2.5;
      frequency[0].rotation = new BABYLON.Vector3(Math.PI / 2, 0, (Math.PI / 180) * -progressRotationValue);
   }
});

